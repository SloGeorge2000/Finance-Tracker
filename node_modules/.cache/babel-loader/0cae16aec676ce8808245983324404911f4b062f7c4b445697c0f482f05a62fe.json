{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jurev\\\\Desktop\\\\SAVINGS 2025\\\\finance-tracker\\\\src\\\\components\\\\PredictionChart.tsx\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction monthsBetween(start, end) {\n  return (end.getFullYear() - start.getFullYear()) * 12 + (end.getMonth() - start.getMonth());\n}\nfunction findIndexForDate(labels, targetDate) {\n  const targetStr = targetDate.toLocaleDateString('en-GB', {\n    year: 'numeric',\n    month: 'short'\n  });\n  return labels.findIndex(label => label === targetStr);\n}\nconst PredictionChart = ({\n  input\n}) => {\n  const now = new Date();\n  const target = new Date(input.targetDate);\n  const fiveYears = new Date(now.getFullYear() + 5, now.getMonth(), 1);\n  const jan1 = new Date(now.getFullYear() + 1, 0, 1);\n\n  // Calculate up to the later of target date or 5 years from now for data, but graph only up to target\n  const endDate = target > fiveYears ? target : fiveYears;\n  const months = monthsBetween(now, endDate);\n  const monthsToTarget = monthsBetween(now, target);\n  let etoro = input.currentSavingsEtoro || 0;\n  let bank = input.currentSavingsBank || 0;\n  let monthlySalary = input.monthlySalary || 0;\n  const monthlyEtoroInterest = (input.etoroInterest || 0) / 100 / 12;\n  const monthlySpending = input.spending.apartment + input.spending.apartmentCosts + input.spending.foodAndDrinks + input.spending.travel + input.spending.accessories + input.spending.socialLife + input.spending.wifi + input.spending.misc;\n  const labels = [];\n  const data = [];\n\n  // For graph, only up to target date\n  for (let i = 0; i <= monthsToTarget; i++) {\n    const date = new Date(now.getFullYear(), now.getMonth() + i, 1);\n    labels.push(date.toLocaleDateString('en-GB', {\n      year: 'numeric',\n      month: 'short'\n    }));\n    data.push(Number((bank + etoro).toFixed(2)));\n    // Apply salary and spending\n    bank = bank + monthlySalary - monthlySpending;\n    // Apply E-toro interest\n    etoro = etoro * (1 + monthlyEtoroInterest);\n    // Increase salary by 4% per year, compounded monthly\n    monthlySalary = monthlySalary * Math.pow(1.04, 1 / 12);\n  }\n\n  // For numbers, continue simulation up to 5 years if needed\n  let bank5 = input.currentSavingsBank || 0;\n  let etoro5 = input.currentSavingsEtoro || 0;\n  let salary5 = input.monthlySalary || 0;\n  let savingsAtJan1 = null;\n  let savingsAt5Years = null;\n  for (let i = 0; i <= months; i++) {\n    const date = new Date(now.getFullYear(), now.getMonth() + i, 1);\n    if (date.getFullYear() === jan1.getFullYear() && date.getMonth() === jan1.getMonth()) {\n      savingsAtJan1 = bank5 + etoro5;\n    }\n    if (date.getFullYear() === fiveYears.getFullYear() && date.getMonth() === fiveYears.getMonth()) {\n      savingsAt5Years = bank5 + etoro5;\n    }\n    bank5 = bank5 + salary5 - monthlySpending;\n    etoro5 = etoro5 * (1 + monthlyEtoroInterest);\n    salary5 = salary5 * Math.pow(1.04, 1 / 12);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"predicted-net-valuation\",\n      children: \"Predicted Net Valuation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"predicted-net-valuation\",\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Predicted Savings on Target Date: \", data[monthsToTarget].toFixed(2), \" EUR\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"predicted-net-valuation\",\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Predicted Savings on Jan 1st next year: \", savingsAtJan1 !== null ? savingsAtJan1.toFixed(2) : 'N/A', \" EUR\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"predicted-net-valuation\",\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Predicted Savings in 5 years: \", savingsAt5Years !== null ? savingsAt5Years.toFixed(2) : 'N/A', \" EUR\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        labels,\n        datasets: [{\n          label: 'Predicted Savings',\n          data,\n          borderColor: '#FFB6C1',\n          backgroundColor: 'rgba(255,182,193,0.2)',\n          fill: true,\n          pointBackgroundColor: '#FFB6C1',\n          pointBorderColor: '#FFB6C1'\n        }]\n      },\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true,\n            labels: {\n              font: {\n                family: 'Roboto'\n              }\n            }\n          },\n          title: {\n            display: true,\n            text: 'Predicted Net Valuation Over Time',\n            font: {\n              size: 18,\n              family: 'Roboto'\n            }\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date',\n              font: {\n                family: 'Roboto'\n              }\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Savings (EUR)',\n              font: {\n                family: 'Roboto'\n              }\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_c = PredictionChart;\nexport default PredictionChart;\nvar _c;\n$RefreshReg$(_c, \"PredictionChart\");","map":{"version":3,"names":["React","Line","jsxDEV","_jsxDEV","monthsBetween","start","end","getFullYear","getMonth","findIndexForDate","labels","targetDate","targetStr","toLocaleDateString","year","month","findIndex","label","PredictionChart","input","now","Date","target","fiveYears","jan1","endDate","months","monthsToTarget","etoro","currentSavingsEtoro","bank","currentSavingsBank","monthlySalary","monthlyEtoroInterest","etoroInterest","monthlySpending","spending","apartment","apartmentCosts","foodAndDrinks","travel","accessories","socialLife","wifi","misc","data","i","date","push","Number","toFixed","Math","pow","bank5","etoro5","salary5","savingsAtJan1","savingsAt5Years","children","className","fileName","_jsxFileName","lineNumber","columnNumber","datasets","borderColor","backgroundColor","fill","pointBackgroundColor","pointBorderColor","options","responsive","plugins","legend","display","font","family","title","text","size","scales","x","y","beginAtZero","_c","$RefreshReg$"],"sources":["C:/Users/jurev/Desktop/SAVINGS 2025/finance-tracker/src/components/PredictionChart.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { PredictionInput } from './PredictionForm';\r\n\r\nfunction monthsBetween(start: Date, end: Date) {\r\n  return (end.getFullYear() - start.getFullYear()) * 12 + (end.getMonth() - start.getMonth());\r\n}\r\n\r\nfunction findIndexForDate(labels: string[], targetDate: Date) {\r\n  const targetStr = targetDate.toLocaleDateString('en-GB', { year: 'numeric', month: 'short' });\r\n  return labels.findIndex(label => label === targetStr);\r\n}\r\n\r\nconst PredictionChart: React.FC<{ input: PredictionInput }> = ({ input }) => {\r\n  const now = new Date();\r\n  const target = new Date(input.targetDate);\r\n  const fiveYears = new Date(now.getFullYear() + 5, now.getMonth(), 1);\r\n  const jan1 = new Date(now.getFullYear() + 1, 0, 1);\r\n\r\n  // Calculate up to the later of target date or 5 years from now for data, but graph only up to target\r\n  const endDate = target > fiveYears ? target : fiveYears;\r\n  const months = monthsBetween(now, endDate);\r\n  const monthsToTarget = monthsBetween(now, target);\r\n\r\n  let etoro = input.currentSavingsEtoro || 0;\r\n  let bank = input.currentSavingsBank || 0;\r\n  let monthlySalary = input.monthlySalary || 0;\r\n  const monthlyEtoroInterest = (input.etoroInterest || 0) / 100 / 12;\r\n  const monthlySpending =\r\n    input.spending.apartment +\r\n    input.spending.apartmentCosts +\r\n    input.spending.foodAndDrinks +\r\n    input.spending.travel +\r\n    input.spending.accessories +\r\n    input.spending.socialLife +\r\n    input.spending.wifi +\r\n    input.spending.misc;\r\n\r\n  const labels: string[] = [];\r\n  const data: number[] = [];\r\n\r\n  // For graph, only up to target date\r\n  for (let i = 0; i <= monthsToTarget; i++) {\r\n    const date = new Date(now.getFullYear(), now.getMonth() + i, 1);\r\n    labels.push(date.toLocaleDateString('en-GB', { year: 'numeric', month: 'short' }));\r\n    data.push(Number((bank + etoro).toFixed(2)));\r\n    // Apply salary and spending\r\n    bank = bank + monthlySalary - monthlySpending;\r\n    // Apply E-toro interest\r\n    etoro = etoro * (1 + monthlyEtoroInterest);\r\n    // Increase salary by 4% per year, compounded monthly\r\n    monthlySalary = monthlySalary * Math.pow(1.04, 1 / 12);\r\n  }\r\n\r\n  // For numbers, continue simulation up to 5 years if needed\r\n  let bank5 = input.currentSavingsBank || 0;\r\n  let etoro5 = input.currentSavingsEtoro || 0;\r\n  let salary5 = input.monthlySalary || 0;\r\n  let savingsAtJan1 = null;\r\n  let savingsAt5Years = null;\r\n  for (let i = 0; i <= months; i++) {\r\n    const date = new Date(now.getFullYear(), now.getMonth() + i, 1);\r\n    if (date.getFullYear() === jan1.getFullYear() && date.getMonth() === jan1.getMonth()) {\r\n      savingsAtJan1 = bank5 + etoro5;\r\n    }\r\n    if (date.getFullYear() === fiveYears.getFullYear() && date.getMonth() === fiveYears.getMonth()) {\r\n      savingsAt5Years = bank5 + etoro5;\r\n    }\r\n    bank5 = bank5 + salary5 - monthlySpending;\r\n    etoro5 = etoro5 * (1 + monthlyEtoroInterest);\r\n    salary5 = salary5 * Math.pow(1.04, 1 / 12);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"predicted-net-valuation\">Predicted Net Valuation</h2>\r\n      <div className=\"predicted-net-valuation\">\r\n        <strong>Predicted Savings on Target Date: {data[monthsToTarget].toFixed(2)} EUR</strong>\r\n      </div>\r\n      <div className=\"predicted-net-valuation\">\r\n        <strong>\r\n          Predicted Savings on Jan 1st next year: {savingsAtJan1 !== null ? savingsAtJan1.toFixed(2) : 'N/A'} EUR\r\n        </strong>\r\n      </div>\r\n      <div className=\"predicted-net-valuation\">\r\n        <strong>\r\n          Predicted Savings in 5 years: {savingsAt5Years !== null ? savingsAt5Years.toFixed(2) : 'N/A'} EUR\r\n        </strong>\r\n      </div>\r\n      <Line\r\n        data={{\r\n          labels,\r\n          datasets: [\r\n            {\r\n              label: 'Predicted Savings',\r\n              data,\r\n              borderColor: '#FFB6C1',\r\n              backgroundColor: 'rgba(255,182,193,0.2)',\r\n              fill: true,\r\n              pointBackgroundColor: '#FFB6C1',\r\n              pointBorderColor: '#FFB6C1',\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          responsive: true,\r\n          plugins: {\r\n            legend: { display: true, labels: { font: { family: 'Roboto' } } },\r\n            title: {\r\n              display: true,\r\n              text: 'Predicted Net Valuation Over Time',\r\n              font: { size: 18, family: 'Roboto' },\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              title: { display: true, text: 'Date', font: { family: 'Roboto' } },\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n              title: { display: true, text: 'Savings (EUR)', font: { family: 'Roboto' } },\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PredictionChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}